# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PlayerState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, player_id: str=None, player_state: str=None, last_active: str=None):  # noqa: E501
        """PlayerState - a model defined in Swagger

        :param player_id: The player_id of this PlayerState.  # noqa: E501
        :type player_id: str
        :param player_state: The player_state of this PlayerState.  # noqa: E501
        :type player_state: str
        :param last_active: The last_active of this PlayerState.  # noqa: E501
        :type last_active: str
        """
        self.swagger_types = {
            'player_id': str,
            'player_state': str,
            'last_active': str
        }

        self.attribute_map = {
            'player_id': 'playerId',
            'player_state': 'playerState',
            'last_active': 'lastActive'
        }
        self._player_id = player_id
        self._player_state = player_state
        self._last_active = last_active

    @classmethod
    def from_dict(cls, dikt) -> 'PlayerState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayerState of this PlayerState.  # noqa: E501
        :rtype: PlayerState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def player_id(self) -> str:
        """Gets the player_id of this PlayerState.


        :return: The player_id of this PlayerState.
        :rtype: str
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id: str):
        """Sets the player_id of this PlayerState.


        :param player_id: The player_id of this PlayerState.
        :type player_id: str
        """

        self._player_id = player_id

    @property
    def player_state(self) -> str:
        """Gets the player_state of this PlayerState.


        :return: The player_state of this PlayerState.
        :rtype: str
        """
        return self._player_state

    @player_state.setter
    def player_state(self, player_state: str):
        """Sets the player_state of this PlayerState.


        :param player_state: The player_state of this PlayerState.
        :type player_state: str
        """
        allowed_values = ["running", "stopped", "unknown"]  # noqa: E501
        if player_state not in allowed_values:
            raise ValueError(
                "Invalid value for `player_state` ({0}), must be one of {1}"
                .format(player_state, allowed_values)
            )

        self._player_state = player_state

    @property
    def last_active(self) -> str:
        """Gets the last_active of this PlayerState.


        :return: The last_active of this PlayerState.
        :rtype: str
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active: str):
        """Sets the last_active of this PlayerState.


        :param last_active: The last_active of this PlayerState.
        :type last_active: str
        """

        self._last_active = last_active
