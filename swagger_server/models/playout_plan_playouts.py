# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.playout_plan_target_group import PlayoutPlanTargetGroup  # noqa: F401,E501
from swagger_server import util


class PlayoutPlanPlayouts(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, from_hour: int=None, to_hour: int=None, asset_id: str=None, player_ids: List[str]=None, count: int=None, priority: int=None, asset_lag: int=None, target_group: PlayoutPlanTargetGroup=None):  # noqa: E501
        """PlayoutPlanPlayouts - a model defined in Swagger

        :param from_hour: The from_hour of this PlayoutPlanPlayouts.  # noqa: E501
        :type from_hour: int
        :param to_hour: The to_hour of this PlayoutPlanPlayouts.  # noqa: E501
        :type to_hour: int
        :param asset_id: The asset_id of this PlayoutPlanPlayouts.  # noqa: E501
        :type asset_id: str
        :param player_ids: The player_ids of this PlayoutPlanPlayouts.  # noqa: E501
        :type player_ids: List[str]
        :param count: The count of this PlayoutPlanPlayouts.  # noqa: E501
        :type count: int
        :param priority: The priority of this PlayoutPlanPlayouts.  # noqa: E501
        :type priority: int
        :param asset_lag: The asset_lag of this PlayoutPlanPlayouts.  # noqa: E501
        :type asset_lag: int
        :param target_group: The target_group of this PlayoutPlanPlayouts.  # noqa: E501
        :type target_group: PlayoutPlanTargetGroup
        """
        self.swagger_types = {
            'from_hour': int,
            'to_hour': int,
            'asset_id': str,
            'player_ids': List[str],
            'count': int,
            'priority': int,
            'asset_lag': int,
            'target_group': PlayoutPlanTargetGroup
        }

        self.attribute_map = {
            'from_hour': 'fromHour',
            'to_hour': 'toHour',
            'asset_id': 'assetId',
            'player_ids': 'playerIds',
            'count': 'count',
            'priority': 'priority',
            'asset_lag': 'assetLag',
            'target_group': 'targetGroup'
        }
        self._from_hour = from_hour
        self._to_hour = to_hour
        self._asset_id = asset_id
        self._player_ids = player_ids
        self._count = count
        self._priority = priority
        self._asset_lag = asset_lag
        self._target_group = target_group

    @classmethod
    def from_dict(cls, dikt) -> 'PlayoutPlanPlayouts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayoutPlan_playouts of this PlayoutPlanPlayouts.  # noqa: E501
        :rtype: PlayoutPlanPlayouts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_hour(self) -> int:
        """Gets the from_hour of this PlayoutPlanPlayouts.


        :return: The from_hour of this PlayoutPlanPlayouts.
        :rtype: int
        """
        return self._from_hour

    @from_hour.setter
    def from_hour(self, from_hour: int):
        """Sets the from_hour of this PlayoutPlanPlayouts.


        :param from_hour: The from_hour of this PlayoutPlanPlayouts.
        :type from_hour: int
        """

        self._from_hour = from_hour

    @property
    def to_hour(self) -> int:
        """Gets the to_hour of this PlayoutPlanPlayouts.


        :return: The to_hour of this PlayoutPlanPlayouts.
        :rtype: int
        """
        return self._to_hour

    @to_hour.setter
    def to_hour(self, to_hour: int):
        """Sets the to_hour of this PlayoutPlanPlayouts.


        :param to_hour: The to_hour of this PlayoutPlanPlayouts.
        :type to_hour: int
        """

        self._to_hour = to_hour

    @property
    def asset_id(self) -> str:
        """Gets the asset_id of this PlayoutPlanPlayouts.


        :return: The asset_id of this PlayoutPlanPlayouts.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id: str):
        """Sets the asset_id of this PlayoutPlanPlayouts.


        :param asset_id: The asset_id of this PlayoutPlanPlayouts.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def player_ids(self) -> List[str]:
        """Gets the player_ids of this PlayoutPlanPlayouts.


        :return: The player_ids of this PlayoutPlanPlayouts.
        :rtype: List[str]
        """
        return self._player_ids

    @player_ids.setter
    def player_ids(self, player_ids: List[str]):
        """Sets the player_ids of this PlayoutPlanPlayouts.


        :param player_ids: The player_ids of this PlayoutPlanPlayouts.
        :type player_ids: List[str]
        """

        self._player_ids = player_ids

    @property
    def count(self) -> int:
        """Gets the count of this PlayoutPlanPlayouts.


        :return: The count of this PlayoutPlanPlayouts.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this PlayoutPlanPlayouts.


        :param count: The count of this PlayoutPlanPlayouts.
        :type count: int
        """

        self._count = count

    @property
    def priority(self) -> int:
        """Gets the priority of this PlayoutPlanPlayouts.


        :return: The priority of this PlayoutPlanPlayouts.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this PlayoutPlanPlayouts.


        :param priority: The priority of this PlayoutPlanPlayouts.
        :type priority: int
        """

        self._priority = priority

    @property
    def asset_lag(self) -> int:
        """Gets the asset_lag of this PlayoutPlanPlayouts.


        :return: The asset_lag of this PlayoutPlanPlayouts.
        :rtype: int
        """
        return self._asset_lag

    @asset_lag.setter
    def asset_lag(self, asset_lag: int):
        """Sets the asset_lag of this PlayoutPlanPlayouts.


        :param asset_lag: The asset_lag of this PlayoutPlanPlayouts.
        :type asset_lag: int
        """

        self._asset_lag = asset_lag

    @property
    def target_group(self) -> PlayoutPlanTargetGroup:
        """Gets the target_group of this PlayoutPlanPlayouts.


        :return: The target_group of this PlayoutPlanPlayouts.
        :rtype: PlayoutPlanTargetGroup
        """
        return self._target_group

    @target_group.setter
    def target_group(self, target_group: PlayoutPlanTargetGroup):
        """Sets the target_group of this PlayoutPlanPlayouts.


        :param target_group: The target_group of this PlayoutPlanPlayouts.
        :type target_group: PlayoutPlanTargetGroup
        """

        self._target_group = target_group
